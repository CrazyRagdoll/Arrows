#include "Cube.h"
#include "Vertex.h"

#include <cstddef>

Cube::Cube()
{
	_vboID = 0;
}

Cube::~Cube()
{
	//cleaing up the buffers when the sprite is destroyed.
	if(_vboID != 0)
	{
		glDeleteBuffers(1, &_vboID);
	}
}

void Cube::init(float x, float y, float z, float width, float height, float depth);
{
	_x = x;
	_y = y;
	_z = z;
	_width = width;
	_height = height;
	_depth = depth;

	// If the vertex buffer is 0, use OpenGL to set it.
	if( _vboID == 0 )
	{
		glGenBuffers(1, &_vboID);
	}

	Vertex vertexData[36];
	
	// First triangle - face
	vertexData[0].position.x = x + width;
	vertexData[0].position.y = y + height;
	vertexData[0].position.z = z;

	vertexData[1].position.x = x;
	vertexData[1].position.y = y + height;
	vertexData[1].position.z = z;

	vertexData[2].position.x = x;
	vertexData[2].position.y = y;
	vertexData[2].position.z = z;

	// Second triangle - face
	vertexData[3].position.x = x;
	vertexData[3].position.y = y;
	vertexData[3].position.z = z;

	vertexData[4].position.x = x + width;
	vertexData[4].position.y = y;
	vertexData[4].position.z = z;

	vertexData[5].position.x = x + width;
	vertexData[5].position.y = y + height;
	vertexData[5].position.z = z;


	// Binding the buffer
	glBindBuffer(GL_ARRAY_BUFFER, _vboID);
	// Uploading the buffer data
	glBufferData(GL_ARRAY_BUFFER, sizeof(vertexData), vertexData, GL_STATIC_DRAW);
	// Unbinding the buffer
	glBindBuffer(GL_ARRAY_BUFFER, 0);
	
}

void Cube::draw()
{
	//bind the buffer object
	glBindBuffer(GL_ARRAY_BUFFER, _vboID);

	//tell opengl that we want to use the first arrribute array.
	//We only need one array right now since we are only using position.
	glEnableVertexAttribArray(0);

	//This is the position attribute pointer
	glVertexAttribPointer(0, 2, GL_FLOAT, GL_FALSE, sizeof(Vertex), (void*)offsetof(Vertex, position));
	//This is the color attribute pointer	
	glVertexAttribPointer(1, 4, GL_UNSIGNED_BYTE, GL_TRUE, sizeof(Vertex), (void*)offsetof(Vertex, color));
	
	//Draw the 6 verticies to the screen
	glDrawArrays(GL_TRIANGLES, 0, 36);

	//disable the vertex attrib array. Not optional
	glDisableVertexAttribArray(0);

	//unbind the vbo
	glBindBuffer(GL_ARRAY_BUFFER, 0);
}
